package actions

import (
	"github.com/bscott/golangflow/models"
	"github.com/gobuffalo/buffalo"
	"github.com/markbates/pop"
	"github.com/pkg/errors"
)

// This file is generated by Buffalo. It offers a basic structure for
// adding, editing and deleting a page. If your model is more
// complex or you need more than the basic implementation you need to
// edit this file.

// Following naming logic is implemented in Buffalo:
// Model: Singular (Post)
// DB Table: Plural (Posts)
// Resource: Plural (Posts)
// Path: Plural (/posts)
// View Template Folder: Plural (/templates/posts/)

// PostsResource is the resource for the post model
type PostsResource struct {
	buffalo.Resource
}

// List gets all Posts. This function is mapped to the path
// GET /posts
func (v PostsResource) List(c buffalo.Context) error {
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)
	posts := &models.Posts{}
	// You can order your list here. Just change
	err := tx.All(posts)
	// to:
	// err := tx.Order("create_at desc").All(posts)
	if err != nil {
		return errors.WithStack(err)
	}
	// Make posts available inside the html template
	c.Set("posts", posts)
	return c.Render(200, r.HTML("posts/index.html"))
}

// Show gets the data for one Post. This function is mapped to
// the path GET /posts/{post_id}
func (v PostsResource) Show(c buffalo.Context) error {
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)
	// Allocate an empty Post
	post := &models.Post{}
	// To find the Post the parameter post_id is used.
	err := tx.Find(post, c.Param("post_id"))
	if err != nil {
		return errors.WithStack(err)
	}
	// Make post available inside the html template
	c.Set("post", post)
	return c.Render(200, r.HTML("posts/show.html"))
}

// New renders the formular for creating a new post.
// This function is mapped to the path GET /posts/new
func (v PostsResource) New(c buffalo.Context) error {
	// Make post available inside the html template
	c.Set("post", &models.Post{})
	return c.Render(200, r.HTML("posts/new.html"))
}

// Create adds a post to the DB. This function is mapped to the
// path POST /posts
func (v PostsResource) Create(c buffalo.Context) error {

	// Grab current user from session
	providerID := c.Session().Get("userID")
	provider := c.Session().Get("user_provider")


	if providerID == nil {
		err := errors.New("Session ID can't be loaded, please re-login")
		return c.Error(401, err)
	}

	if provider == nil {
		err := errors.New("Session provider can't be loaded, please re-login")
		return c.Error(401, err)
	}

	// Search for current logged in user
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)
	// Allocate an empty User
	usr := &models.User{}
	query := tx.Where("provider = ?", provider).Where("provider_userid = ?", providerID)
	err := query.First(&usr)

	if err != nil {
		return errors.WithStack(err)
	}

	// Allocate an empty Post
	post := &models.Post{UserID: usr.ID}
	// Bind post to the html form elements
	err = c.Bind(post)
	if err != nil {
		return errors.WithStack(err)
	}
	// Get the DB connection from the context
	// tx := c.Value("tx").(*pop.Connection)
	// Validate the data from the html form
	verrs, err := tx.ValidateAndCreate(post)
	if err != nil {
		return errors.WithStack(err)
	}
	if verrs.HasAny() {
		// Make post available inside the html template
		c.Set("post", post)
		// Make the errors available inside the html template
		c.Set("errors", verrs)
		// Render again the new.html template that the user can
		// correct the input.
		return c.Render(422, r.HTML("posts/new.html"))
	}
	// If there are no errors set a success message
	c.Flash().Add("success", "Post was created successfully")
	// and redirect to the posts index page
	return c.Redirect(302, "/posts/%s", post.ID)
}

// Edit renders a edit formular for a post. This function is
// mapped to the path GET /posts/{post_id}/edit
func (v PostsResource) Edit(c buffalo.Context) error {
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)
	// Allocate an empty Post
	post := &models.Post{}
	err := tx.Find(post, c.Param("post_id"))
	if err != nil {
		return errors.WithStack(err)
	}
	// Make post available inside the html template
	c.Set("post", post)
	return c.Render(200, r.HTML("posts/edit.html"))
}

// Update changes a post in the DB. This function is mapped to
// the path PUT /posts/{post_id}
func (v PostsResource) Update(c buffalo.Context) error {
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)
	// Allocate an empty Post
	post := &models.Post{}
	err := tx.Find(post, c.Param("post_id"))
	if err != nil {
		return errors.WithStack(err)
	}
	// Bind post to the html form elements
	err = c.Bind(post)
	if err != nil {
		return errors.WithStack(err)
	}
	verrs, err := tx.ValidateAndUpdate(post)
	if err != nil {
		return errors.WithStack(err)
	}
	if verrs.HasAny() {
		// Make post available inside the html template
		c.Set("post", post)
		// Make the errors available inside the html template
		c.Set("errors", verrs)
		// Render again the edit.html template that the user can
		// correct the input.
		return c.Render(422, r.HTML("posts/edit.html"))
	}
	// If there are no errors set a success message
	c.Flash().Add("success", "Post was updated successfully")
	// and redirect to the posts index page
	return c.Redirect(302, "/posts/%s", post.ID)
}

// Destroy deletes a post from the DB. This function is mapped
// to the path DELETE /posts/{post_id}
func (v PostsResource) Destroy(c buffalo.Context) error {
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)
	// Allocate an empty Post
	post := &models.Post{}
	// To find the Post the parameter post_id is used.
	err := tx.Find(post, c.Param("post_id"))
	if err != nil {
		return errors.WithStack(err)
	}
	err = tx.Destroy(post)
	if err != nil {
		return errors.WithStack(err)
	}
	// If there are no errors set a flash message
	c.Flash().Add("success", "Post was destroyed successfully")
	// Redirect to the posts index page
	return c.Redirect(302, "/posts")
}
